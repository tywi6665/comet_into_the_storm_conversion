{"version":3,"sources":["Components/Containers/Container.js","Components/Containers/Subcontainer.js","Components/ImageWrapper.js","Pages/Main.js","Pages/Inflow.js","Pages/Rainbands.js","Pages/Eye&eyewall.js","Pages/Outflow.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","SubContainer","ImageWrapper","src","alt","Main","setCurrentPage","useState","hover","setHover","overlays","map","overlay","i","key","onClick","e","onMouseEnter","onMouseLeave","Inflow","sliderValue","setSliderValue","isToggled","setIsToggled","handleOnChange","target","getAttribute","data-arrow","id","type","name","orient","value","min","max","onChange","htmlFor","Rainbands","Eye_Eyewall","Outflow","App","currentPage","page","renderedPage","renderCurrentPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16752b7c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = ({ children }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\n\r\nconst SubContainer = ({ children }) => {\r\n    return (\r\n        <div className={`sub-container`}>\r\n            <h1>Inside the storm</h1>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SubContainer;","import React from 'react';\r\n\r\nconst ImageWrapper = ({ src }) => {\r\n\r\n    return (\r\n        <div className=\"image-wrapper\">\r\n            <img src={`./graphics/${src}.jpg`} alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageWrapper;","import React, { useState } from 'react';\r\nimport SubContainer from '../Components/Containers/Subcontainer';\r\nimport ImageWrapper from \"../Components/ImageWrapper\";\r\n\r\nconst Main = ({ setCurrentPage }) => {\r\n\r\n    const [hover, setHover] = useState(\"\")\r\n    const overlays = {\r\n        inflow: [\"inflow-1\", \"inflow-2\"],\r\n        rainbands: [\"rainbands-1\", \"rainbands-2\", \"rainbands-3\", \"rainbands-4\", \"rainbands-5\", \"rainbands-6\", \"rainbands-7\", \"rainbands-8\"],\r\n        eyewall: [\"eyewall-1\", \"eyewall-2\"],\r\n        outflow: [\"outflow-1\", \"outflow-2\"]\r\n    }\r\n\r\n    return (\r\n        <SubContainer>\r\n            <div className=\"img-overlay-container\">\r\n                <ImageWrapper\r\n                    src={\"mainmenu\"}\r\n                />\r\n                <div className=\"overlay\">\r\n                    {hover ? (\r\n                        hover.map((overlay, i) => (\r\n                            <div className={`${overlay} circle`} key={i}></div>\r\n                        ))\r\n                    ) : (null)}\r\n                </div>\r\n            </div>\r\n            <ul className=\"menu-list\">\r\n                <li className=\"clickable\"\r\n                    onClick={e => setCurrentPage(\"Inflow\")}\r\n                    onMouseEnter={() => setHover(overlays.inflow)}\r\n                    onMouseLeave={() => setHover(\"\")}\r\n                >Inflow</li>\r\n                <li className=\"clickable\"\r\n                    onClick={e => setCurrentPage(\"Rainbands\")}\r\n                    onMouseEnter={() => setHover(overlays.rainbands)}\r\n                    onMouseLeave={() => setHover(\"\")}\r\n                >Rainbands</li>\r\n                <li className=\"clickable\"\r\n                    onClick={e => setCurrentPage(\"Eye&eyewall\")}\r\n                    onMouseEnter={() => setHover(overlays.eyewall)}\r\n                    onMouseLeave={() => setHover(\"\")}\r\n                >Eye & Eyewall</li>\r\n                <li className=\"clickable\"\r\n                    onClick={e => setCurrentPage(\"Outflow\")}\r\n                    onMouseEnter={() => setHover(overlays.outflow)}\r\n                    onMouseLeave={() => setHover(\"\")}\r\n                >Outflow</li>\r\n            </ul>\r\n        </SubContainer>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, { useState } from 'react';\r\nimport SubContainer from '../Components/Containers/Subcontainer';\r\nimport ImageWrapper from '../Components/ImageWrapper';\r\n\r\nconst Inflow = ({ setCurrentPage }) => {\r\n\r\n    const [sliderValue, setSliderValue] = useState(0)\r\n    const [isToggled, setIsToggled] = useState(false)\r\n\r\n    const handleOnChange = (e) => {\r\n        if (e.target.getAttribute(\"data-arrow\") === \"up\" && sliderValue < 4) {\r\n            setSliderValue(sliderValue + 1)\r\n            setIsToggled(false)\r\n        } else if (e.target.getAttribute(\"data-arrow\") === \"down\" && sliderValue > 0) {\r\n            setSliderValue(sliderValue - 1)\r\n            setIsToggled(false)\r\n        } else { }\r\n    }\r\n\r\n    return (\r\n        <SubContainer>\r\n            <h3>Inflow</h3>\r\n            <div className=\"inflow-image-wrapper\">\r\n                <ImageWrapper\r\n                    src={!isToggled ? (`inflow_${sliderValue}`) : (`inflow_${sliderValue}_wire`)}\r\n                />\r\n                <form className=\"input-wrapper\">\r\n                    <i className=\"arrow up\" data-arrow=\"up\" onClick={(e) => handleOnChange(e)}></i>\r\n                    <input id=\"slider\" type=\"range\" name=\"slider\" orient=\"vertical\" value={sliderValue} min=\"0\" max=\"4\" onChange={(e) => setSliderValue(e.target.value)} />\r\n                    <i className=\"arrow down\" data-arrow=\"down\" onClick={(e) => handleOnChange(e)}></i>\r\n                </form>\r\n                <label name=\"slider-label\" htmlFor=\"slider\">Camera Height</label>\r\n            </div>\r\n            {sliderValue === 0 || sliderValue === 4 ? (\r\n                !isToggled ? (\r\n                    <div>\r\n                        <p\r\n                            className=\"clickable\"\r\n                            onClick={() => setIsToggled(!isToggled)}\r\n                        >\r\n                            Wire Frame Image</p>\r\n                    </div>) : (\r\n                        <div>\r\n                            <p\r\n                                className=\"clickable\"\r\n                                onClick={() => setIsToggled(!isToggled)}\r\n                            >\r\n                                Solid Image</p>\r\n                        </div>\r\n                    )\r\n            ) : (null)}\r\n            <ol className=\"info-list\">\r\n                <li>Air rising, forming thunderstorms</li>\r\n                <li>Warm humid air flows inward, speeding up as it approaches the eyewall</li>\r\n                <li>Winds spiral in the eyewall</li>\r\n            </ol>\r\n            <p\r\n                className=\"clickable\"\r\n                onClick={e => setCurrentPage(\"Main\")}\r\n            >\r\n                Back to Menu</p>\r\n        </SubContainer>\r\n    );\r\n}\r\n\r\nexport default Inflow;","import React, { useState } from 'react';\r\nimport SubContainer from '../Components/Containers/Subcontainer';\r\nimport ImageWrapper from '../Components/ImageWrapper';\r\n\r\nconst Rainbands = ({ setCurrentPage }) => {\r\n\r\n    const [isToggled, setIsToggled] = useState(false)\r\n\r\n    return (\r\n        <SubContainer>\r\n            <h3>Rainbands</h3>\r\n            <ImageWrapper\r\n                src={!isToggled ? (\"rainband_1\") : (\"rainband_2\")}\r\n            />\r\n            {!isToggled ? (\r\n                <div>\r\n                    <p\r\n                        className=\"clickable\"\r\n                        onClick={() => setIsToggled(!isToggled)}\r\n                    >\r\n                        Inside The Bands (Click to go inside the bands)</p>\r\n                    <ol className=\"info-list\">\r\n                        <li>Rainbands typically are 3-30 miles wide and up tp 300 miles long</li>\r\n                    </ol>\r\n                </div>\r\n            ) : (\r\n                    <div>\r\n                        <p\r\n                            className=\"clickable\"\r\n                            onClick={() => setIsToggled(!isToggled)}\r\n                        >\r\n                            Back Out</p>\r\n                        <ol className=\"info-list\">\r\n                            <li>Rainbands produce heavy rainfall, as much as 25 cm (10 in.) per hour</li>\r\n                            <li>RADAR image of a rainband</li>\r\n                        </ol>\r\n                    </div>\r\n                )}\r\n            <p\r\n                className=\"clickable\"\r\n                onClick={e => setCurrentPage(\"Main\")}\r\n            >\r\n                Back to Menu</p>\r\n        </SubContainer>\r\n    );\r\n}\r\n\r\nexport default Rainbands;","import React, { useState } from 'react';\r\nimport SubContainer from '../Components/Containers/Subcontainer';\r\nimport ImageWrapper from '../Components/ImageWrapper';\r\n\r\nconst Eye_Eyewall = ({ setCurrentPage }) => {\r\n\r\n    const [isToggled, setIsToggled] = useState(false)\r\n\r\n    return (\r\n        <SubContainer>\r\n            <h3>Eye & Eyewall</h3>\r\n            <ImageWrapper\r\n                src={!isToggled ? (\"eyewall_1\") : (\"eyewall_2\")}\r\n            />\r\n            <div>\r\n                <p\r\n                    className=\"clickable\"\r\n                    onClick={() => setIsToggled(!isToggled)}\r\n                >\r\n                    {!isToggled ? (\"Wire Frame Image\") : (\"Solid Image\")} </p>\r\n            </div>\r\n            <ol className=\"info-list\">\r\n                <li>Eye: Light winds, partly cloudy or clear skies. Average diameters 20-50 km</li>\r\n                <li>Eyewall: Heaviest precipitation and strongest winds</li>\r\n                <li>Spiraling winds in eyewall</li>\r\n                <li>Sinking air</li>\r\n            </ol>\r\n            <p\r\n                className=\"clickable\"\r\n                onClick={e => setCurrentPage(\"Main\")}\r\n            >\r\n                Back to Menu</p>\r\n        </SubContainer>\r\n    );\r\n}\r\n\r\nexport default Eye_Eyewall;","import React, { useState } from 'react';\r\nimport SubContainer from '../Components/Containers/Subcontainer';\r\nimport ImageWrapper from '../Components/ImageWrapper';\r\n\r\nconst Outflow = ({ setCurrentPage }) => {\r\n\r\n    const [isToggled, setIsToggled] = useState(false)\r\n\r\n    return (\r\n        <SubContainer>\r\n            <h3>Outflow</h3>\r\n            <ImageWrapper\r\n                src={!isToggled ? (\"outflow_1\") : (\"outflow_2\")}\r\n            />\r\n            <div>\r\n                <p\r\n                    className=\"clickable\"\r\n                    onClick={() => setIsToggled(!isToggled)}\r\n                >\r\n                    {!isToggled ? (\"Wire Frame Image\") : (\"Solid Image\")} </p>\r\n            </div>\r\n            <ol className=\"info-list\">\r\n                <li>Air flowing out from the center of the storm (Outflow)</li>\r\n                <li>Air sinking into storm center, warming and suppressing clouds. Winds are calm</li>\r\n                <li>Cirrostratus clouds capping the storm</li>\r\n            </ol>\r\n            <p\r\n                className=\"clickable\"\r\n                onClick={e => setCurrentPage(\"Main\")}\r\n            >\r\n                Back to Menu</p>\r\n        </SubContainer>\r\n    );\r\n}\r\n\r\nexport default Outflow;","import React, { useState } from 'react';\nimport Container from './Components/Containers/Container';\nimport 'react-tabs/style/react-tabs.css';\nimport './App.scss';\nimport Main from './Pages/Main';\nimport Inflow from './Pages/Inflow';\nimport Rainbands from \"./Pages/Rainbands\";\nimport Eye_Eyewall from \"./Pages/Eye&eyewall\";\nimport Outflow from './Pages/Outflow';\n\nfunction App() {\n\n  const [currentPage, setCurrentPage] = useState(\"Main\")\n\n  const renderCurrentPage = (page) => {\n    let renderedPage;\n    if (page === \"Main\") {\n      renderedPage = <Main setCurrentPage={setCurrentPage} />\n    } else if (page === \"Inflow\") {\n      renderedPage = <Inflow setCurrentPage={setCurrentPage} />\n    } else if (page === \"Rainbands\") {\n      renderedPage = <Rainbands setCurrentPage={setCurrentPage} />\n    } else if (page === \"Eye&eyewall\") {\n      renderedPage = <Eye_Eyewall setCurrentPage={setCurrentPage} />\n    } else if (page === \"Outflow\") {\n      renderedPage = <Outflow setCurrentPage={setCurrentPage} />\n    }\n    return renderedPage\n  }\n\n  return (\n\n    <Container>\n      {renderCurrentPage(currentPage)}\n    </Container>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}